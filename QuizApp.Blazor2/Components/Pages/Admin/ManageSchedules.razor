@page "/ManageSchedules"
@using QuizApp.Application.DTOs.Schedule
@layout NavbarLayout

@inject UserService UserService
@inject ScheduleService ScheduleService
@inject NavigationManager Nav

<h3>Manage Schedules</h3>
<p class="text-danger">@ErrorMessage</p>

<table class="table table-striped">
    <thead>
    <tr>
        <th scope="col">No.</th>
        <th scope="col">Quiz Title</th>
        <th scope="col">Start Date</th>
        <th scope="col">End Date</th>
    </tr>
    </thead>
    <tbody>
    @if (Schedules == null)
    {
        <p class="text-danger">There are no schedules.</p>
    }
    else
    {
        @foreach (var schedule in Schedules)
        {
            <tr>
                <th scope="row">@(Schedules.IndexOf(schedule) + 1)</th>
                <td>@schedule.Quiz.Title</td>
                <td>@schedule.StartDate</td>
                <td>@schedule.EndDate</td>
            </tr>
        }
    }
    </tbody>
</table>

<button class="btn btn-primary">Add New Schedule</button>


<Loading IsLoading="@_isLoading"/>

@code {

    private List<ScheduleDetailsDto> Schedules { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _isLoading = true;

        if (firstRender)
        {
            var userResponse = await UserService.GetUserDetails();

            if (!userResponse.IsSuccess)
            {
                Nav.NavigateTo("/Login");
                return;
            }

            var user = userResponse.Data!;

            if (user.Role != "Admin")
            {
                Nav.NavigateTo("/");
            }
        }

        var response = await ScheduleService.GetSchedules();
        if (!response.IsSuccess)
        {
            ErrorMessage = response.Message;
            StateHasChanged();
            return;
        }

        Schedules = response.Data!;
        _isLoading = false;
        StateHasChanged();
    }

}