@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util
@using NuGet.Packaging
@inject UserScoreService UserScoreService

<Loading IsLoading="_isLoading"/>

<div class="modal fade show d-block" style="display:block;" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">User Statistics</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column gap-2 justify-content-center">
                <p class="text-danger">@ErrorMessage</p>
                <Chart Config="_config" @ref="_chart"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>

@code {

    [Parameter] public Guid UserId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    private LineConfig _config = new();
    private Chart _chart;

    private List<UserScoreDto> UserScores { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private bool _isLoading = true;

    private void Close()
    {
        OnClose.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "User Scores"
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                },
                Hover = new Hover
                {
                    AnimationDuration = 100,
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Quiz Dates"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Score"
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;
            StateHasChanged();

            var response = await UserScoreService.GetScoreByUser(UserId);
            if (!response.IsSuccess)
            {
                ErrorMessage = response.Message;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            UserScores = response.Data!;

            InitializeChartConfig();

            _isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeChartConfig()
    {
        _config.Data.Datasets.Clear();

        var quizDates = UserScores.Select(us => us.Schedule.StartDate.ToString("MM/dd/yyyy")).ToArray();
        var scores = UserScores.Select(us => us.Score).ToArray();

        IDataset<float> dataset = new LineDataset<float>
        {
            Label = "User Score Data",
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Fill = FillingMode.Disabled,
            BorderWidth = 2,
            PointRadius = 3,
            PointHoverRadius = 5,
            SteppedLine = SteppedLine.False,
        };
        
        dataset.AddRange(scores.ToList());

        _config.Data.Datasets.Add(dataset);

        foreach (var quizDate in quizDates)
        {
            _config.Data.Labels.Add(quizDate);
        }
        
        _chart.Update();
        StateHasChanged();
    }


    private class StatsDto
    {
        public DateTime QuizDate { get; set; }
        public float Score { get; set; }
    }

}