@inject UserService UserService

@if (IsVisible)
{
    <EditForm class="modal fade show d-block" style="display:block;" tabindex="-1" role="dialog" Model="@Dto">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add User To Schedule</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>
                <div class="modal-body d-flex flex-column gap-2">
                    <div class="form-group">
                        <label class="form-label">Select Initial to Add</label>
                        <InputSelect class="form-select" @bind-Value="@Dto.UserId">
                            <option value="">Select Initial</option>
                            @foreach (var user in Users)
                            {
                                <option value="@user.UserId">@user.Initial</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <p class="text-danger">@ErrorMessage</p>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save changes</button>
                </div>
            </div>
        </div>
    </EditForm>
    <div class="modal-backdrop fade show"></div>
}

<Loading IsLoading="_isLoading"/>

@code {
    [Parameter] public UserDetailsDto Dto { get; set; } = new();
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    private List<UserDetailsDto> Users { get; set; } = new();
    private bool _isLoading = false;
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;
            StateHasChanged();

            var response = await UserService.GetUsers();
            if (!response.IsSuccess)
            {
                ErrorMessage = response.Message;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            Users = response.Data!;

            _isLoading = false;
            StateHasChanged();
        }
        
        Console.WriteLine(Users.Count);
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }

    private void SaveChanges()
    {
        OnSave.InvokeAsync();
    }

}