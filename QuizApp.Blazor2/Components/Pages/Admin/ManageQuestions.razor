@page "/ManageQuestions/{Id}"
@layout NavbarLayout

@inject QuizService QuizService
@inject QuestionService QuestionService
@inject OptionService OptionService
@inject HttpClient HttpClient

<Loading IsLoading="@_isLoading"/>

<h3>Manage Questions for @Quiz.Title</h3>
<p class="text-danger">@ErrorMessage</p>

<div class="d-flex flex-column gap-2">

    @foreach (var question in Questions)
    {
        <div class="border rounded-3 shadow-sm py-lg-3 px-lg-4">

            @if (!string.IsNullOrEmpty(question.ImageUrl))
            {
                <img src="@($"{HttpClient.BaseAddress}{question.ImageUrl}")" class="rounded mx-auto d-block w-25" alt="Question Image"/>
            }

            <div class="d-flex justify-content-between align-items-center p-2">
                <h5>@question.QuestionText</h5>
                <div>
                    <button class="btn btn-success" @onclick="() => AddImage(question)">Add Image</button>
                    <button class="btn btn-primary" @onclick="() => EditQuestion(question)" type="button">Edit Question</button>
                    <button class="btn btn-danger" @onclick="() => DeleteQuestion(question.QuestionId.ToString())">Delete Question</button>
                </div>
            </div>

            <div class="d-flex flex-column gap-2 p-2">
                @if (question.Options.Count == 0)
                {
                    <p class="text-danger">There are no options for this question.</p>
                }

                @foreach (var option in question.Options)
                {
                    <div class="d-flex align-items-center gap-2">
                        <input type="radio" disabled/>
                        <div class="p-0 m-0 d-flex align-items-center gap-2">
                            <div class="p-0 m-0 d-flex align-items-center">
                                <p class="fw-bold m-0">
                                    @(option.OptionChoice)
                                </p>
                                .
                            </div>
                            <p class="p-0 m-0 me-2">@option.OptionText</p>
                        </div>
                        <button class="btn btn-danger" @onclick="() => DeleteOption(question.QuestionId, option.OptionChoice)">Delete Option</button>
                        @if (option.IsCorrect)
                        {
                            <p class="p-0 m-0 text-success">Correct Option</p>
                        }
                    </div>
                }
                
                <p class="text-danger">@OptionErrorMessage</p>

                <button class="btn btn-success" @onclick="() => AddOption(question)">Add Option</button>
            </div>

        </div>
    }

    <button class="btn btn-success" @onclick="AddQuestion">Add Question</button>
</div>

<AddOptionModal Option="@NewOption" IsVisible="IsAddOptionVisible" OnClose="OnOptionModalClose" OnSave="OnOptionModalSave"/>
<AddQuestionImage Question="@SelectedQuestion" IsVisible="IsAddImageModalVisible" OnClose="OnImageModalClose"/>
<AddQuestionModal Question="@NewQuestion" IsVisible="IsAddModalVisible" OnClose="OnAddModalClose" OnSave="OnAddModalSave"/>
<UpdateQuestionModal Question="@SelectedQuestion" IsVisible="IsUpdateModalVisible" OnClose="OnUpdateModalClose" OnSave="OnUpdateModalSave"/>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    private QuizDetailsDto Quiz { get; set; } = new();
    private List<QuestionDto> Questions { get; set; } = new();
    private QuestionDto SelectedQuestion { get; set; } = new();
    private QuestionDto NewQuestion { get; set; } = new();
    private OptionDto NewOption { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private string OptionErrorMessage { get; set; } = string.Empty;
    private bool IsUpdateModalVisible { get; set; }
    private bool IsAddModalVisible { get; set; }
    private bool IsAddImageModalVisible { get; set; }
    private bool IsAddOptionVisible { get; set; }
    private bool _isLoading = true;

    private void AddImage(QuestionDto question)
    {
        SelectedQuestion = question;
        IsAddImageModalVisible = true;
    }

    private void AddQuestion()
    {
        _isLoading = true;
        StateHasChanged();

        IsAddModalVisible = true;
        _isLoading = false;
        StateHasChanged();
    }

    private void AddOption(QuestionDto question)
    {
        SelectedQuestion = question;
        IsAddOptionVisible = true;
        StateHasChanged();
    }

    private void EditQuestion(QuestionDto question)
    {
        _isLoading = true;
        StateHasChanged();

        SelectedQuestion = question;
        IsUpdateModalVisible = true;
        _isLoading = false;
        StateHasChanged();
    }

    private async Task DeleteOption(Guid questionId, char optionChoice)
    {
        OptionErrorMessage = "";
        _isLoading = true;
        StateHasChanged();

        var response = await OptionService.RemoveOption(new RemoveOptionDto { QuestionId = questionId, OptionChoice = optionChoice.ToString() });
        if (!response.IsSuccess)
        {
            OptionErrorMessage = response.Message;
        }

        await Refresh();
        _isLoading = false;
        StateHasChanged();
    }

    private void OnAddModalClose()
    {
        NewQuestion = new();
        IsAddModalVisible = false;
        StateHasChanged();
    }

    private async Task OnAddModalSave()
    {
        var response = await QuestionService.AddQuestion(new AddQuestionDto
        {
            QuestionText = NewQuestion.QuestionText,
            ImageUrl = NewQuestion.ImageUrl,
            QuizId = Quiz.Id,
        });

        if (!response.IsSuccess)
        {
            ErrorMessage = response.Message;
        }

        IsAddModalVisible = false;
        await Refresh();
        StateHasChanged();
    }

    private void OnUpdateModalClose()
    {
        SelectedQuestion = new();
        IsUpdateModalVisible = false;
        StateHasChanged();
    }

    private async Task OnUpdateModalSave()
    {
        var response = await QuestionService.UpdateQuestion(new UpdateQuestionDto
        {
            QuestionId = SelectedQuestion.QuestionId,
            QuestionText = SelectedQuestion.QuestionText,
            ImageUrl = SelectedQuestion.ImageUrl,
            QuizId = Quiz.Id,
        });

        if (!response.IsSuccess)
        {
            ErrorMessage = response.Message;
        }

        SelectedQuestion = new();
        IsUpdateModalVisible = false;
        await Refresh();
        StateHasChanged();
    }

    private async Task OnImageModalClose()
    {
        SelectedQuestion = new();
        IsAddImageModalVisible = false;
        await Refresh();
        StateHasChanged();
    }

    private void OnOptionModalClose()
    {
        SelectedQuestion = new();
        IsAddOptionVisible = false;
        StateHasChanged();
    }

    private async Task OnOptionModalSave()
    {
        OptionErrorMessage = "";
        _isLoading = true;
        StateHasChanged();

        var response = await OptionService.AddOption(new AddOptionDto
        {
            OptionChoice = NewOption.OptionChoice.ToString(),
            OptionText = NewOption.OptionText,
            IsCorrect = NewOption.IsCorrect,
            QuestionId = SelectedQuestion.QuestionId,
        });

        if (!response.IsSuccess)
        {
            OptionErrorMessage = response.Message;
        }

        NewOption = new();

        IsAddOptionVisible = false;
        await Refresh();
        _isLoading = false;
        StateHasChanged();
    }

    private async Task DeleteQuestion(string questionId)
    {
        _isLoading = true;
        StateHasChanged();

        var response = await QuestionService.DeleteQuestion(questionId);
        if (!response.IsSuccess)
        {
            ErrorMessage = response.Message;
        }

        await Refresh();
        _isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh();
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task Refresh()
    {
        _isLoading = true;
        var quizResponse = await QuizService.GetQuizById(Id);
        if (!quizResponse.IsSuccess)
        {
            ErrorMessage = quizResponse.Message;
            return;
        }

        Quiz = quizResponse.Data!;

        var questionsResponse = await QuestionService.GetQuestionsInQuiz(Id);
        if (!questionsResponse.IsSuccess)
        {
            ErrorMessage = questionsResponse.Message;
            return;
        }

        Questions = questionsResponse.Data!;
    }

}