@page "/ManageQuiz"
@layout NavbarLayout

@inject UserService UserService
@inject NavigationManager Nav
@inject QuizService QuizService

<Loading IsLoading="@_isLoading"/>

<h3>Manage Quiz</h3>

<p class="@(IsSuccess ? "text-success" : "text-danger")">@Message</p>

<table class="table table-striped">
    <thead>
    <tr>
        <th scope="col">No.</th>
        <th scope="col">Title</th>
        <th scope="col">Actions</th>
    </tr>
    </thead>
    <tbody>
    @if (Quizzes == null)
    {
        <p class="text-danger">There are no quiz yet.</p>
    }
    else
    {
        @foreach (var quiz in Quizzes)
        {
            <tr>
                <th scope="row">@(Quizzes.IndexOf(quiz) + 1)</th>
                <td>@quiz.Title</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditQuiz(quiz.Id.ToString())">Edit</button>
                    <button class="btn btn-success" @onclick="() => ManageQuestions(quiz.Id.ToString())">Manage Questions</button>
                    <button class="btn btn-danger" @onclick="() => DeleteQuiz(quiz.Id.ToString())">Delete</button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AddQuiz">Add New Quiz</button>

@code {

    private UserDetailsDto User { get; set; } = new();
    private List<QuizDetailsDto> Quizzes { get; set; } = new();
    private string Message { get; set; } = string.Empty;
    private bool _isLoading = true;
    private bool IsSuccess { get; set; } = true;

    private void AddQuiz()
    {
        Nav.NavigateTo("/AddQuiz");
    }

    private void EditQuiz(string id)
    {
        Nav.NavigateTo($"/UpdateQuiz/{id}");
    }

    private void ManageQuestions(string id)
    {
        Nav.NavigateTo($"/ManageQuestions/{id}");
    }

    private async Task DeleteQuiz(string id)
    {
        _isLoading = true;
        StateHasChanged();

        var response = await QuizService.RemoveQuiz(id);
        IsSuccess = response.IsSuccess;
        Message = response.Message;

        _isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await UserService.GetUserDetails();

            if (!response.IsSuccess)
            {
                Nav.NavigateTo("/Login");
                return;
            }

            User = response.Data!;

            if (User.Role != "Admin")
            {
                Nav.NavigateTo("/");
            }
        }

        var quizzesResponse = await QuizService.GetQuizzes();
        if (!quizzesResponse.IsSuccess)
        {
            Message = quizzesResponse.Message;
            StateHasChanged();
            return;
        }

        Quizzes = quizzesResponse.Data!;
        _isLoading = false;
        StateHasChanged();
    }


}