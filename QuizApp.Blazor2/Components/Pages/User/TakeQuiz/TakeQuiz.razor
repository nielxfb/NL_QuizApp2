@page "/TakeQuiz/{Id}"
@using QuizApp.Application.DTOs.Response
@using QuizApp.Application.DTOs.UserScore
@using QuizApp.Domain.Entities
@using QuizApp.Domain.Interfaces
@layout NavbarLayout

@inject HttpClient HttpClient
@inject ScheduleService ScheduleService
@inject QuizService QuizService
@inject QuestionService QuestionService
@inject UserScoreService UserScoreService
@inject UserService UserService
@inject IRabbitMqPublisher<AddResponseDto> Publisher
@inject UserScheduleService UserScheduleService
@inject NavigationManager Nav
@inject ResponseService ResponseService

<PageTitle>Quiz App</PageTitle>

<p class="text-danger">@ErrorMessage</p>

<h3 class="w-100 d-flex flex-row-reverse">
    Time Remaining: @(new DateTime(_timeRemaining.Ticks).ToLongTimeString())
</h3>

<div class="d-flex flex-column w-100 gap-2">

    @foreach (var questionSelection in QuestionSelections)
    {
        <div class="border rounded-3 shadow-sm py-lg-3 px-lg-4">

            @if (!string.IsNullOrEmpty(questionSelection.Question.ImageUrl))
            {
                <img src="@($"{HttpClient.BaseAddress}{questionSelection.Question.ImageUrl}")" class="rounded mx-auto d-block w-25" alt="Question Image"/>
            }

            <div class="d-flex justify-content-between align-items-center p-2">
                <h5>@questionSelection.Question.QuestionText</h5>
            </div>

            <div class="d-flex flex-column gap-2 p-2">
                @if (questionSelection.Options.Count == 0)
                {
                    <p class="text-danger">There are no options for this question.</p>
                }
                else
                {
                    @foreach (var option in questionSelection.Options)
                    {
                        <div class="d-flex align-items-center gap-2">
                            <input type="radio"
                                   name="@($"question_{questionSelection.Question.QuestionId}")"
                                   value="@option.OptionChoice"
                                   checked="@(option.OptionChoice.ToString() == questionSelection.SelectedOption)"
                                   @onchange="() => OnOptionSelected(questionSelection, option)"/>
                            <div class="p-0 m-0 d-flex align-items-center gap-2">
                                <div class="p-0 m-0 d-flex align-items-center">
                                    <p class="fw-bold m-0">@option.OptionChoice</p>
                                    .
                                </div>
                                <p class="p-0 m-0 me-2">@option.OptionText</p>
                            </div>
                        </div>
                    }
                }
            </div>

        </div>
    }

    <button class="btn btn-success" @onclick="FinalizeQuiz">Finalize Quiz</button>

</div>

<Loading IsLoading="_isLoading"/>

@code {

    [Parameter] public string Id { get; set; } = string.Empty;
    private bool _isLoading = true;
    private DateTime _serverTime;
    private TimeSpan _timeRemaining;
    private string ErrorMessage { get; set; } = string.Empty;
    private ScheduleDetailsDto Schedule { get; set; } = new();
    private List<QuestionDto> Questions { get; set; } = new();
    private UserDetailsDto User { get; set; } = new();

    private List<QuestionSelection> QuestionSelections { get; set; } = new();

    private async Task FinalizeQuiz()
    {
        _isLoading = true;
        StateHasChanged();

        var response = await UserScheduleService.UpdateStatus(new UpdateStatusDto
        {
            ScheduleId = Schedule.Id,
            UserId = User.UserId,
            Status = "Completed",
        });

        if (!response.IsSuccess)
        {
            ErrorMessage = response.Message;
            _isLoading = false;
            StateHasChanged();
            return;
        }

        List<OptionDto> selectedOptions = new();
        foreach (var qS in QuestionSelections)
        {
            var selectedOption = qS.Options
                .FirstOrDefault(o => o.OptionChoice.ToString() == qS.SelectedOption);

            if (selectedOption != null)
                selectedOptions.Add(new OptionDto
                {
                    OptionChoice = qS.SelectedOption[0],
                    OptionText = selectedOption.OptionText,
                    IsCorrect = selectedOption.IsCorrect
                });
        }

        var scoreResponse = await UserScoreService.AddUserScoreAsync(new AddUserScoreDto
        {
            UserId = User.UserId,
            QuizId = Schedule.Quiz.Id,
            QuestionCount = QuestionSelections.Count,
            SelectedOptions = selectedOptions,
        });

        if (!scoreResponse.IsSuccess)
        {
            ErrorMessage = scoreResponse.Message;
            _isLoading = false;
            StateHasChanged();
            return;
        }

        Nav.NavigateTo("/ViewQuizSchedules");
    }

    private async Task OnOptionSelected(QuestionSelection questionSelection, OptionDto option)
    {
        var quizId = Schedule.Quiz.Id;
        questionSelection.SelectedOption = option.OptionChoice.ToString();
        StateHasChanged();

        var dto = new AddResponseDto
        {
            QuestionId = questionSelection.Question.QuestionId,
            OptionChoice = option.OptionChoice.ToString(),
            UserId = User.UserId,
            ScheduleId = Schedule.Id,
        };

        await Publisher.PublishMessageAsync(dto);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;

            var userResponse = await UserService.GetUserDetails();
            if (!userResponse.IsSuccess)
            {
                ErrorMessage = userResponse.Message;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            User = userResponse.Data!;

            var scheduleResponse = await ScheduleService.GetScheduleById(Id);
            if (!scheduleResponse.IsSuccess)
            {
                ErrorMessage = scheduleResponse.Message;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            Schedule = scheduleResponse.Data!;

            var questionResponse = await QuestionService.GetQuestionsInQuiz(Schedule.Quiz.Id.ToString());
            if (!questionResponse.IsSuccess)
            {
                ErrorMessage = questionResponse.Message;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            Questions = questionResponse.Data!;

            var selectedOptionsResponse = await ResponseService.GetUserResponses(new GetUserResponsesInQuizDto
            {
                UserId = User.UserId,
                ScheduleId = Schedule.Id
            });

            if (!selectedOptionsResponse.IsSuccess)
            {
                ErrorMessage = selectedOptionsResponse.Message;
                _isLoading = false;
                StateHasChanged();
                return;
            }

            var selectedOptions = selectedOptionsResponse.Data!;

            foreach (var question in Questions)
            {
                var selectedOption = selectedOptions.SelectedOptions
                    .FirstOrDefault(so => so.Question.QuestionId == question.QuestionId);
                QuestionSelections.Add(new QuestionSelection
                {
                    Question = question,
                    SelectedOption = selectedOption != null
                        ? selectedOption.SelectedOption.OptionChoice.ToString()
                        : string.Empty,
                    Options = question.Options
                });
            }

            var connection = new HubConnectionBuilder()
                .WithUrl($"{HttpClient.BaseAddress}TimeHub")
                .Build();

            connection.On<DateTime>("ReceiveTime", time =>
            {
                _serverTime = time;
                CalculateTimeRemaining();
                InvokeAsync(StateHasChanged);
            });

            await connection.StartAsync();

            StateHasChanged();
            _isLoading = false;
        }
    }

    private void CalculateTimeRemaining()
    {
        _timeRemaining = Schedule.EndDate - _serverTime.ToUniversalTime();

        if (_timeRemaining <= TimeSpan.Zero)
        {
            _timeRemaining = TimeSpan.Zero;
        }
    }

    private class QuestionSelection
    {
        public QuestionDto Question { get; set; } = new();
        public string SelectedOption { get; set; } = string.Empty;
        public List<OptionDto> Options { get; set; } = new();
    }


}