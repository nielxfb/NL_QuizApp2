@page "/Login"
@layout CenterLayout

@inject NavigationManager Nav
@inject UserService UserService

<PageTitle>Quiz App - Login</PageTitle>

<Loading IsLoading="@_isLoading"/>

<div class="w-auto container-fluid rounded-3 d-flex flex-column shadow-lg py-lg-5 px-lg-5 gap-4">
    <h2>Login Page</h2>

    <EditForm Model="@Model" OnSubmit="Handle" class="d-flex flex-column gap-2" FormName="LoginForm">
        <div class="form-group">
            <label class="form-label">Initial</label>
            <InputText @bind-Value="Model.Initial" placeholder="Enter initial" class="form-control"/>
        </div>
        <div class="form-group">
            <label class="form-label">Password</label>
            <InputText @bind-Value="Model.Password" type="password" placeholder="Enter password" class="form-control"/>
        </div>

        <p class="text text-danger">@ErrorMessage</p>
        <button class="btn btn-primary" type="submit">Login</button>
    </EditForm>

    <a href="/Register">Not registered yet? Register here.</a>
</div>

@code {
    private LoginUserDto Model { get; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await UserService.GetUserDetails();
            if (response.IsSuccess)
            {
                Nav.NavigateTo("/");
                return;
            }
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task Handle()
    {
        _isLoading = true;
        StateHasChanged();

        var response = await UserService.Login(Model);

        if (response.IsSuccess)
        {
            Nav.NavigateTo(("/"));
            return;
        }

        ErrorMessage = response.Message;

        _isLoading = false;
        StateHasChanged();
    }

}